// <auto-generated />
using System;
using LibraryManagement.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LibraryManagement.Migrations
{
    [DbContext(typeof(LibraryContext))]
    [Migration("20241108130514_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Emprestimo", b =>
                {
                    b.Property<int>("EmprestimoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmprestimoID"));

                    b.Property<string>("CPFUsuario")
                        .IsRequired()
                        .HasColumnType("nvarchar(11)");

                    b.Property<DateTime>("DataDevolucao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataEmprestimo")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExemplarID")
                        .HasColumnType("int");

                    b.Property<int>("StatusEmprestimo")
                        .HasColumnType("int");

                    b.HasKey("EmprestimoID");

                    b.HasIndex("CPFUsuario");

                    b.HasIndex("ExemplarID");

                    b.ToTable("Emprestimos");
                });

            modelBuilder.Entity("LibraryManagement.Models.Autor", b =>
                {
                    b.Property<int>("AutorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AutorID"));

                    b.Property<string>("NomeAutor")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("AutorID");

                    b.ToTable("Autores");
                });

            modelBuilder.Entity("LibraryManagement.Models.AutorLivro", b =>
                {
                    b.Property<int>("AutorLivroID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AutorLivroID"));

                    b.Property<int>("AutorID")
                        .HasColumnType("int");

                    b.Property<int>("ISBN")
                        .HasColumnType("int");

                    b.HasKey("AutorLivroID");

                    b.HasIndex("AutorID");

                    b.HasIndex("ISBN");

                    b.ToTable("AutorLivros");
                });

            modelBuilder.Entity("LibraryManagement.Models.Biblioteca", b =>
                {
                    b.Property<int>("BibliotecaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BibliotecaID"));

                    b.Property<string>("EmailBiblioteca")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("EnderecoID")
                        .HasColumnType("int");

                    b.Property<string>("NomeBiblioteca")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TelefoneBiblioteca")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.HasKey("BibliotecaID");

                    b.HasIndex("EnderecoID");

                    b.ToTable("Bibliotecas");
                });

            modelBuilder.Entity("LibraryManagement.Models.Devolucao", b =>
                {
                    b.Property<int>("DevolucaoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DevolucaoID"));

                    b.Property<string>("CPFUsuario")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<DateTime>("DataDevolucao")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmprestimoID")
                        .HasColumnType("int");

                    b.Property<int>("ExemplarID")
                        .HasColumnType("int");

                    b.HasKey("DevolucaoID");

                    b.HasIndex("CPFUsuario");

                    b.HasIndex("EmprestimoID");

                    b.HasIndex("ExemplarID");

                    b.ToTable("Devolucoes");
                });

            modelBuilder.Entity("LibraryManagement.Models.Editora", b =>
                {
                    b.Property<int>("EditoraID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EditoraID"));

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NomeEditora")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("EditoraID");

                    b.ToTable("Editoras");
                });

            modelBuilder.Entity("LibraryManagement.Models.Endereco", b =>
                {
                    b.Property<int>("EnderecoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EnderecoID"));

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CEP")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Complemento")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("UF")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.HasKey("EnderecoID");

                    b.HasIndex("UF");

                    b.ToTable("Enderecos");
                });

            modelBuilder.Entity("LibraryManagement.Models.EstadosBrasileiros", b =>
                {
                    b.Property<string>("UF")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("UF");

                    b.ToTable("EstadosBrasileiros");
                });

            modelBuilder.Entity("LibraryManagement.Models.Exemplar", b =>
                {
                    b.Property<int>("ExemplarID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExemplarID"));

                    b.Property<int>("BibliotecaID")
                        .HasColumnType("int");

                    b.Property<int>("ISBN")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ExemplarID");

                    b.HasIndex("BibliotecaID");

                    b.HasIndex("ISBN");

                    b.ToTable("Exemplares");
                });

            modelBuilder.Entity("LibraryManagement.Models.Genero", b =>
                {
                    b.Property<int>("GeneroID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GeneroID"));

                    b.Property<string>("NomeGenero")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("GeneroID");

                    b.ToTable("Generos");
                });

            modelBuilder.Entity("LibraryManagement.Models.Livro", b =>
                {
                    b.Property<int>("ISBN")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ISBN"));

                    b.Property<int>("EditoraID")
                        .HasColumnType("int");

                    b.Property<string>("NomeLivro")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("QntdPaginas")
                        .HasColumnType("int");

                    b.HasKey("ISBN");

                    b.HasIndex("EditoraID");

                    b.ToTable("Livros");
                });

            modelBuilder.Entity("LibraryManagement.Models.LivroGenero", b =>
                {
                    b.Property<int>("LivroGeneroID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LivroGeneroID"));

                    b.Property<int>("GeneroID")
                        .HasColumnType("int");

                    b.Property<int>("ISBN")
                        .HasColumnType("int");

                    b.HasKey("LivroGeneroID");

                    b.HasIndex("GeneroID");

                    b.HasIndex("ISBN");

                    b.ToTable("LivroGeneros");
                });

            modelBuilder.Entity("LibraryManagement.Models.Usuario", b =>
                {
                    b.Property<string>("CPFUsuario")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<DateTime>("DataNascimentoUsuario")
                        .HasColumnType("datetime2");

                    b.Property<int>("EnderecoID")
                        .HasColumnType("int");

                    b.Property<string>("NomeUsuario")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("TelefoneUsuario")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.HasKey("CPFUsuario");

                    b.HasIndex("EnderecoID");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("Emprestimo", b =>
                {
                    b.HasOne("LibraryManagement.Models.Usuario", "Usuario")
                        .WithMany("Emprestimos")
                        .HasForeignKey("CPFUsuario")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LibraryManagement.Models.Exemplar", "Exemplar")
                        .WithMany("Emprestimos")
                        .HasForeignKey("ExemplarID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Exemplar");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("LibraryManagement.Models.AutorLivro", b =>
                {
                    b.HasOne("LibraryManagement.Models.Autor", "Autor")
                        .WithMany("AutorLivros")
                        .HasForeignKey("AutorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryManagement.Models.Livro", "Livro")
                        .WithMany("AutorLivros")
                        .HasForeignKey("ISBN")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Autor");

                    b.Navigation("Livro");
                });

            modelBuilder.Entity("LibraryManagement.Models.Biblioteca", b =>
                {
                    b.HasOne("LibraryManagement.Models.Endereco", "Endereco")
                        .WithMany("Bibliotecas")
                        .HasForeignKey("EnderecoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Endereco");
                });

            modelBuilder.Entity("LibraryManagement.Models.Devolucao", b =>
                {
                    b.HasOne("LibraryManagement.Models.Usuario", "Usuario")
                        .WithMany("Devolucoes")
                        .HasForeignKey("CPFUsuario")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Emprestimo", "Emprestimo")
                        .WithMany("Devolucoes")
                        .HasForeignKey("EmprestimoID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LibraryManagement.Models.Exemplar", "Exemplar")
                        .WithMany("Devolucoes")
                        .HasForeignKey("ExemplarID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Emprestimo");

                    b.Navigation("Exemplar");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("LibraryManagement.Models.Endereco", b =>
                {
                    b.HasOne("LibraryManagement.Models.EstadosBrasileiros", "EstadosBrasileiros")
                        .WithMany("Enderecos")
                        .HasForeignKey("UF")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EstadosBrasileiros");
                });

            modelBuilder.Entity("LibraryManagement.Models.Exemplar", b =>
                {
                    b.HasOne("LibraryManagement.Models.Biblioteca", "Biblioteca")
                        .WithMany("Exemplares")
                        .HasForeignKey("BibliotecaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryManagement.Models.Livro", "Livro")
                        .WithMany("Exemplares")
                        .HasForeignKey("ISBN")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Biblioteca");

                    b.Navigation("Livro");
                });

            modelBuilder.Entity("LibraryManagement.Models.Livro", b =>
                {
                    b.HasOne("LibraryManagement.Models.Editora", "Editora")
                        .WithMany("Livros")
                        .HasForeignKey("EditoraID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Editora");
                });

            modelBuilder.Entity("LibraryManagement.Models.LivroGenero", b =>
                {
                    b.HasOne("LibraryManagement.Models.Genero", "Genero")
                        .WithMany("LivroGeneros")
                        .HasForeignKey("GeneroID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryManagement.Models.Livro", "Livro")
                        .WithMany("LivroGeneros")
                        .HasForeignKey("ISBN")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genero");

                    b.Navigation("Livro");
                });

            modelBuilder.Entity("LibraryManagement.Models.Usuario", b =>
                {
                    b.HasOne("LibraryManagement.Models.Endereco", "Endereco")
                        .WithMany("Usuarios")
                        .HasForeignKey("EnderecoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Endereco");
                });

            modelBuilder.Entity("Emprestimo", b =>
                {
                    b.Navigation("Devolucoes");
                });

            modelBuilder.Entity("LibraryManagement.Models.Autor", b =>
                {
                    b.Navigation("AutorLivros");
                });

            modelBuilder.Entity("LibraryManagement.Models.Biblioteca", b =>
                {
                    b.Navigation("Exemplares");
                });

            modelBuilder.Entity("LibraryManagement.Models.Editora", b =>
                {
                    b.Navigation("Livros");
                });

            modelBuilder.Entity("LibraryManagement.Models.Endereco", b =>
                {
                    b.Navigation("Bibliotecas");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("LibraryManagement.Models.EstadosBrasileiros", b =>
                {
                    b.Navigation("Enderecos");
                });

            modelBuilder.Entity("LibraryManagement.Models.Exemplar", b =>
                {
                    b.Navigation("Devolucoes");

                    b.Navigation("Emprestimos");
                });

            modelBuilder.Entity("LibraryManagement.Models.Genero", b =>
                {
                    b.Navigation("LivroGeneros");
                });

            modelBuilder.Entity("LibraryManagement.Models.Livro", b =>
                {
                    b.Navigation("AutorLivros");

                    b.Navigation("Exemplares");

                    b.Navigation("LivroGeneros");
                });

            modelBuilder.Entity("LibraryManagement.Models.Usuario", b =>
                {
                    b.Navigation("Devolucoes");

                    b.Navigation("Emprestimos");
                });
#pragma warning restore 612, 618
        }
    }
}
